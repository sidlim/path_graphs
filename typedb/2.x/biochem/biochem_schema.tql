    define

# Also need a generic "molecule class" type
# I'm finding that a lot of these pathways given in FA don't specify exact reactants or exact products
# and will instead give molecule classes
# Example: in the arachidonic acid pathway, COXes (enzyme class) convert arachidonic acid into cyclic endoperoxides
#    Some ambiguity here: Cyclic endoperoxides might be a class of intermediates, or class of final products

# Another thing that I noticed: multi-activity enzymes exist, and I'm not sure if inhibitors act at the enzyme level
# or if they act at the reaction level - e.g., is lipocortin an inhibitor of the entire phospholipase A2 enzyme?
# or is it just an inhibitor of this particular reaction done by the enzyme?
# This definitely is a case-by-case situation, and I don't know what the right way to handle this is

# Part of the reason I haven't made much progress is scope. I'm not sure what should and shouldn't be part of the to-do list until the conferences
# One way to go might be to flesh out the biochemistry module
# MVP: a schema that lets us build and visualize hypergraphs

becomes sub relation,
    relates reactant,
    relates product,
    plays catalyzes:reaction,
    plays delta_process:process;

catalyzes sub relation,
    relates reaction,
    relates catalyst,
    plays inhibits:catalysis;

inhibits sub relation,
    relates inhibitor,
    relates catalysis,
    plays delta_quantity:cause,
    plays delta_quantity:origin,
    plays delta_process:cause,
    plays delta_process:origin;

molecule sub entity,
    plays becomes:reactant,
    plays becomes:product,
    plays delta_quantity:quantity,
    owns name @key;

enzyme sub molecule,
    plays catalyzes:catalyst;

name sub attribute, value string;

# Define two different kinds of changes here:
# One for enzyme inhibition processes
# And another for decreases in reactants or products

delta_quantity sub relation,
    relates quantity,
    relates origin,
    relates cause,
    owns direction,
    plays delta_quantity:cause,
    plays delta_process:cause;

delta_process sub relation,
    relates process,
    relates origin,
    relates cause,
    owns direction,
    plays delta_quantity:cause,
    plays delta_process:cause;

direction sub attribute, value long;

# Infer changes in enzyme activity for inhibitors:
rule inhibition-delta: when {
    $c (catalyst:$enzyme, reaction:$r) isa catalyzes;
    $inhibition (inhibitor:$m, catalysis:$c) isa inhibits;
} then {
    (quantity:$enzyme, origin:$inhibition, cause:$inhibition) isa delta_quantity;
};

rule inhibition-delta-direction: when {
    $c (catalyst:$enzyme, reaction:$r) isa catalyzes;
    $inhibition (inhibitor:$m, catalysis:$c) isa inhibits;
    $dq (quantity:$enzyme, origin:$inhibition, cause:$inhibition) isa delta_quantity;
} then {
    $dq has direction -1;
};

# Changes derived from changes in enzyme quantity:
rule enzyme-derived-delta: when {
    $catalysis (reaction:$reaction, catalyst:$enzyme) isa catalyzes;
    $enzyme-change (quantity:$enzyme, origin:$origin, cause:$_) isa delta_quantity;
} then {
    (process:$reaction, origin:$origin, cause:$enzyme-change) isa delta_process;
};

rule enzyme-derived-delta-direction: when {
    $catalysis (reaction:$reaction, catalyst:$enzyme) isa catalyzes;
    $enzyme-change (quantity:$enzyme, origin:$origin, cause:$_) isa delta_quantity,
    has direction $d;
    $dr (process:$reaction, origin:$origin, cause:$enzyme-change) isa delta_process;
} then {
    $dr has $d;
};

# Changes derived from changes in reactant quantity:
rule reactant-derived-delta: when {
    $reactant-change (quantity:$reactant, origin:$origin, cause:$_) isa delta_quantity;
    (reactant:$reactant, product:$product) isa becomes;
} then {
    (quantity:$product, origin:$origin, cause:$reactant-change) isa delta_quantity;
};

rule reactant-derived-delta-direction: when {
    $reactant-change (quantity:$reactant, origin:$origin, cause:$_) isa delta_quantity,
    has direction $d;
    (reactant:$reactant, product:$product) isa becomes;
    $dq (quantity:$product, origin:$origin, cause:$reactant-change) isa delta_quantity;
} then {
    $dq has $d;
};

# Changes in product derived from reaction inhibition/activation:
rule reaction-derived-product-delta: when {
    $reaction (reactant:$reactant, product:$product) isa becomes;
    $reaction-change (process:$reaction, origin:$origin, cause:$_) isa delta_process;
} then {
    (quantity:$product, origin:$origin, cause:$reaction-change) isa delta_quantity;
};

rule reaction-derived-product-delta-direction: when {
    $reaction (reactant:$reactant, product:$product) isa becomes;
    $reaction-change (process:$reaction, origin:$origin, cause:$_) isa delta_process,
    has direction $d;
    $dq (quantity:$product, origin:$origin, cause:$reaction-change) isa delta_quantity;
} then {
    $dq has $d;
};

# Changes in reactant derived from reaction inhibition/activation:
rule reaction-derived-reactant-delta: when {
    $reaction (reactant:$reactant, product:$product) isa becomes;
    $reaction-change (process:$reaction, origin:$origin, cause:$_) isa delta_process;
    # Flip the direction for the product side of the reaction change
} then {
    (quantity:$reactant, origin:$origin, cause:$reaction-change) isa delta_quantity;
};

# Assign direction to changes in reactant derived from reaction inhibition/activation:
rule reaction-derived-reactant-delta-direction: when {
    $reaction (reactant:$reactant, product:$product) isa becomes;
    $reaction-change (process:$reaction, origin:$origin, cause:$_) isa delta_process,
    has direction $d;
    # Flip the direction for the product side of the reaction change
    $delta (quantity:$reactant, origin:$origin, cause:$reaction-change) isa delta_quantity;
    ?n = (-1) * $d;
} then {
    $delta has direction ?n;
};
